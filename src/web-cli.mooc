
import Core from "moocscript.core"
import Window from "js" { global }

-- Save references to lua baselib functions used
local _G = _G
local load = load
local pack, unpack, tinsert, tremove = table.pack, table.unpack, table.insert, table.remove
local tostring = tostring
local traceback = debug.traceback
local xpcall = xpcall

document = Window.document

output = document:getElementById("moocscript-console")
prompt = document:getElementById("moocscript-prompt")
input = document:getElementById("moocscript-input")
assert(output and prompt and input)

fn triggerEvent(el, type) {
    e = document:createEvent("HTMLEvents")
    e:initEvent(type, false, true)
    el:dispatchEvent(e)
}

history = {}
historyIndex = nil
historyLimit = 128

_G.print = fn(...) {
    toprint = pack(...)

    line = document:createElement("pre")
    line.style["white-space"] = "pre-wrap"
    output:appendChild(line)

    for i = 1, toprint.n {
        if i ~= 1 {
            line:appendChild(document:createTextNode("\t"))
        }
        line:appendChild(document:createTextNode(tostring(toprint[i])))
    }

    output.scrollTop = output.scrollHeight
}

local mooc_config = {
    shebang = false,
    fi_scope = { "*" = true }
}

fn moocLoadString(text) {
    ret, emsg = Core.toAST(mooc_config, text)
    if not ret {
        return nil, emsg
    }
    ret, emsg = Core.toLua(mooc_config, ret)
    if not ret {
        return nil, emsg
    }
    ret, emsg = load(ret, "stdin")
    if not ret {
        return nil, emsg
    }
    return ret
}

fn doREPL() {
    do {
        line = document:createElement("span")
        line:appendChild(document:createTextNode(prompt.textContent))
        --
        item = document:createElement("pre")
        item.className = "lua"
        item.style.padding = "0"
        item.style.display = "inline"
        item.style["white-space"] = "pre-wrap"
        item.textContent = input.value
        --
        line:appendChild(item)
        output:appendChild(line)
        output:appendChild(document:createElement("br"))
        output.scrollTop = output.scrollHeight
    }

    if input.value.length == 0 {
        return
    }

    line = input.value
    if history[#history] ~= line {
        tinsert(history, line)
        if #history > historyLimit {
            tremove(history, 1)
        }
    }

    local fc, err = moocLoadString("return " .. line)
    if not fc {
        fc, err = moocLoadString(line)
    }

    if fc {
        results = pack(xpcall(fc, traceback))
        if results[1] {
            if results.n > 1 {
                _G.print(unpack(results, 2, results.n))
            }
        } else  {
            _G.print(results[2])
        }
    } else {
        _G.print(err)
    }

    input.value = ""

    triggerEvent(output, "change")
}

fn input:onkeydown(e) {
    if not e {
        e = Window.event
    }

    key = e.key or e.which

    if key == "Enter" and not e.shiftKey {
        historyIndex = nil
        doREPL()
        return false
    } elseif key == "ArrowUp" or key == "Up" {
        if historyIndex {
            if historyIndex > 1 {
                historyIndex = historyIndex - 1
            }
        } else { -- start with more recent history item
            hist_len = #history
            if hist_len > 0 {
                historyIndex = hist_len
            }
        }
        input.value = history[historyIndex]
        return false
    } elseif key == "ArrowDown" or key == "Down" {
        newvalue = ""
        if historyIndex {
            if historyIndex < #history {
                historyIndex = historyIndex + 1
                newvalue = history[historyIndex]
            } else { -- no longer in history
                historyIndex = nil
            }
        }
        input.value = newvalue
        return false
    } elseif key == "l"
        and e.ctrlKey
        and not e.shiftKey
        and not e.altKey
        and not e.metaKey
        and not e.isComposing {
        -- Ctrl+L clears screen like you would expect in a terminal
        output.innerHTML = ""
        _G.print(_G._COPYRIGHT)
        _G.print(Core.version())
        _G.print("export * -- default global variable")
        return false
    } else {
    }
}

_G.print(_G._COPYRIGHT)
_G.print(Core.version())
_G.print("export * -- default global variable")
moocLoadString("export *")